
DevOps Training :::

Start Date: 27th Jan. 2024
Completion Date: 25th Feb. 2024

Time : 9:30AM to 1:30PM IST - Weekends.
4Hrs/Day - 10 Days.



######################
Day 1 - 27th Jan. 2024
######################


Module 1: 

	DevOps Training :::

		1. Intro to DevOps 
		2. DevOps Tools ::
			Open-Source DevOps Tools :::
				GIT
				Jenkins 
				Ansible
				Docker 
				Kubernetes 
				Terraform
				Prometheus and Grafana
				
	Introduction to DevOps :::
	
		- What is DevOps according to you!
		
		
		SDLC :::
		
		Software - Applications 
			
			- Desktop Applications 
					Billing System
			- Web Applications 
					E_Commerce(amazone.com)/Netflex/facebook
			- Mobile Applications
					Mobile App 
			- Embedded Applications 
					Chip level Applications 
					
		SDLC ::: Software Development Life Cycle
		
			- Requirement Analysis 		-- Billing System( functions/tools/resource/timeline)
			- Design 
			- Code/Develop
			- Testing 
			- Implement the product to Production(LIVE)
			- Monitor/Maintain the application
		
		Waterfall Model :::
				- Completely Linear in approach
				- Follows Top-Down Approach
				- Monolith Application Architecture
				

			Core_Project :
				- Requirement Analysis 		-- Billing System( 10 functions/tools/resource/timeline) - 10Months.
				- Design 
				- Code/Develop		
				- Testing 
				- Implement the product to Production(LIVE)
				- Monitor/Maintain the application
				
			Enhancement-Project1
				- Requirement Analysis 		-- Billing System( functions/tools/resource/timeline) - 10Months.
				- Design 
				- Code/Develop		
				- Testing 
				- Implement the product to Production(LIVE)
				- Monitor/Maintain the application
				

			Drawbacks :
				We cannot go back and change/add the requirements
			
		AGILE Methodologies :::

			SDLC ::: Software Development Life Cycle
			
				- Requirement Analysis 		-- Billing System( functions/tools/resource/timeline)
				- Design 
				- Code/Develop
				- Testing 
				- Implement the product to Production(LIVE)
				- Monitor/Maintain the application	

			Billing Application 
				10 Functions :: inventory/payment/stock/
				Functions/Modules/Iterations
				
			Iteration 1 : stock Mgmt.

				- Requirement Analysis 		
				- Design 
				- Code/Develop
				- Testing 
				- Implemented/Integrated for further Testing for Release
				- Monitor/Maintain the application	

				
			Iteration 2 : payment.

				- Requirement Analysis 		
				- Design 
				- Code/Develop
				- Testing 
				- Implemented/Integrated for further Testing for Release
				- Monitor/Maintain the application	
	
			Iteration nth : New Function.

				- Requirement Analysis 		
				- Design 
				- Code/Develop
				- Testing 
				- Implemented/Integrated for further Testing for Release
				- Monitor/Maintain the application	
				
			Using AGILE Methodologies ::
				We can able achieve :
				
					Continuous Development
					Continuous Integration 
					Continuous Testing 
					Continuous Delivery 
						It is process of releasing the products to Production Environment with manual approvals.
					
				We CANNOT achieve :
					Continuous Deployment
						It is process of releasing the products to Production Environment without any manual approvals.
						
				AGILE Methodologies always seek for manual approval from all stakeholder for the Production Release.
				
		DevOps :::
		
			What is DevOps ???
			
			DevOps is a Software Development Strategy which helps to promote the collaboration between the teams like  Development Team and Operations Team to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Monitoring in a more automated fashion.
				
			
			How to Implement DevOps ?? ==> DevSecOps 
			
			Teams ::
			
				Infra-Structure Management Team 
				Development Team 
				Testing Team 
				Release Management Team 
				Production Support Team 
				Production Monitoring Team 
				Security Team 
				
			DevOps Stage :::
	
				Continuous Development :
					- It is the capability of the Development Team to Continuously Develop the code and improve the Developers' productivity.
					
					What is the Role of Developers ???
					- Coding.
					
					- Code 				Java/python/C#
					- Manual Build 
						Build ==> 	It is a process of compiling the Source Code and Creating Artifacts
									Artifacts are executables - Binaries(*.war/*.jar/*.exec/*.dll)
									Build Tools : Maven 
					- Manual Unit Testing 
					- Promote the changes to Test Environment
					- Notify the Testing teams 
					
					Using DevOps Approach :::
					
						- Understand the Design & Code. 
							IDEs - Integrated Development Environment - Eclipse/Visual Studio Code / Visual Studio / Pycharm
							
						- Save the Changes in a Souce Code Management System.
						
						The following activities can be automated using DevOps Approach/Tools	
							- Automated Build 
							- Automated Unit Testing 
							- Automatically Promote the changes to Test Environment
							- Notify the Testing teams 						
											
						Tools :::
							IDEs & GIT / GITHUB  / Maven 
							
				Continuous Integration :
					- It is the capability of the Development Team to Continuously Integrate the code changes for further testing without relying others.	
					
						The following activities can be automated using DevOps Approach/Tools	
							- Automated Build 
							- Automated Unit Testing 
							- Automatically Promote the changes to Test Environment
							- Notify the Testing teams 
							
					- Application Architecture !!!
					
						- Monolith Application Architecture 
							- Tightly coupled application 
							- We cannot independly test the changes.
							
						- Micro-Service Based Application Architecture
							- Loose-Coupled Application 
							- Functions/Modules are called as micro-service
							
						Tools :
							IDE/GIT/Jenkins/Docker/Kubernetes/Ansible
				
				Continuous Testing
				
					- Testing Team perform Automated Testing

					Tools : 
						Jenkins/JUNIT/TESTNG/SELENIUM
				
				Continuous Delivery/Deployment 
					
					- Both the Continuous Delivery/Deployment are used for Production Release 

						Tools :
							Jenkins/Docker/Kubernetes/Ansible
							
					Continuous Delivery 
						- Always need the Manual Approvals before Production Release.
						- It is process of releasing the products to Production Environment with manual approvals.
						- There might be downtime.
						Eg.: 
						
							Banking Applications -- 
							
								Production Release Window :
									During Weekends/Mid-Night - 4 to 6hrs 
									Seek approvals from all stake-holders
									Post Production Release Testing ::
										- Try to fix the issue.
										- or revert the changes. 
										
					Continuous Deployment
						- This doesnt required any Manual Intervension.
						- It is process of releasing the products to Production Environment without any manual approvals	

						Eg.: 
														
							Facebook/Netflix/google/amazon :::
								Achieve Continuous Deployment without any manual intervension/downtime.
								Using Matured Level of DevOps.
				
				Continuous Monitoring :
				
					- Infra-Structure Monitoring
							- CPU/Memory/Traffic 
						
						Tools : Prometheus/Grafana/Nagios/Splunk/Dynatace
					
					- Application Monitoring
						
						Application Monitor the performance of Application calls 
						
						Tools : DataDog / AppDynamics
						
			Infra-Structure Management Team 			
					- Provisioning/Creating Infra-Structure
					- Configuration of Infra-Structure
					
					Tools : 
					
						IAC Tools - Infra-Structure As Code:
						
						Provisioning/Creating Infra-Structure 			---> Terraform 
						Configuration of Infra-Structure				---> Ansible 
					
			DevOps Tools :::
			
				Open-Source DevOps :::
					GIT 
					Jenkins 
					Docker 
					Ansible 
					Terraform 
					Kubernetes 
					Prometheus/Grafana
					
				Managed Services :::
				
					AWS 	-- Code Commit/Pipeline,.....
					Azure 	-- Azure DevOps Service 
					GCP 	-- GCP DevOps Service
					
					
			Environments :::
			
				Non-Prod Environments 									====> 	Production Environments
				
					DEV Environment
					Build Environment 
					Test Environment
						QA - Quality Assurance Testing 
						UAT - User Acceptance Testing 					====>		Prod Environment
						
						
			DevOps LifeCycle :::	


				Automation :::
				
				Coding 	--> Build --> Testing --> Release to Prod --> Monitoring 
				  |														|
				  |														|
				  |														|
				  |														|
				  <------------------------------------------------------
				  
				 
			What is DevOps ???
			
			DevOps is a Software Development Strategy which helps to promote the collaboration between the teams like  Development Team and Operations Team to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Monitoring in a more automated fashion.					
				
			DevOps is all about ::: Continuous Improvement!!!

				People 		
				Process 
				Tools 
				
				
			Detailed Assessment :::
			
			
			DevOps Team 
			
				DevOps Asso. / Sr. DevOps Asso.
				DevOps Engg. / Sr. DevOps Engg.
				DevOps Lead / Sr. DevOps Lead 
				DevOps Architect / Sr. DevOps Archi.
				DevOps Consultant 
				
			Always find the Scope for Automation.
			
			Waterfall/Agile/DevOps/DevSecOps/GITOps/SRE/MLOps/AIOps.............
			
			
Module 2 :
		
			Version Control System using GIT.
			
			Intro. to VCS 
			
			Continuous Development ::::
			
			What is	Version Control System?
			
				- Is used to Version the Source Code Changes.
				- To Track the Changes.
				- The Changes can be tracked using the Version_Number/Tags/Commit_ids
			
			Web Application ::::
			
			Web_app_Project_Folder 
				index.html 
				
			<html>
			--
			--
			-
			-
			-
			-
			-
			</html>
			
				save index.html 
				save the file using VCS ->
				index.html_V1.0
				test the changes 
			
			<html>
			--
			--
			-
			-asdfs
			asdfsasd
			fashiondf
			asdf
			-
			-
			-
			</html>			
			
				save index.html 
				save the file using VCS ->
				index.html_V1.1
				test the changes 	


			Types of Version Control System :::
			
				1. Local VCS 
						- It is used only in a Local machine
						- Cannot possible to share the source code repositories to other.
						
				2. Centralized VCS
						- The Source Code Repositories and maintained in a central server.
						- Users should have valid access and should be Online to access the files from Centralized VCS.
						- If Users are offline / If the central server is down, then we cannot access the files. 
						- Users will not have any Copy of files in the local machine.
						
				3. Distributed VCS ::
						- The Source Code Repositories are maintained in a Remote Servers.
						- Users should have valid access remote Repositories.
						- If Users can work offline.
						- Copy of Files can be stored in the local machine.
						
				
			GIT :::
			
				It is a Open-Source Distributed Version control System.
				It is used to version control the Changes 
				It is used to Track the Changes
				It is used to perform Parallel Development
					Parallel Development can be achieved using Branching Techniques. 
					
					
			Local Machine 		- Install GIT CLI
			
				Local GIT Repositories
			
			Remote GIT Repositories
				
				GITHUB 	- is one of the Remote Repositories
				GITLAB 
				AZURE Repo 
				AWS Code Commit 
				BitBucket 
			
			Create GITHUB Account :::
					https://github.com/
					
			Terminologies :::
			
				Repositories ::
				
					It is collection of Folders and Files. 
			
			
	
######################
Day 2 - 28th Jan. 2024
######################		


	Distributed Version Control System - GIT.
	
			Install GIT CLI in Local Machine 
			
			Working with GIT Commands....	

		Project_Folder 
			Repo1 
			Repo2 
			Repo3 
			
		Linux Fundamentals 
				Linux a Operating System 
				Linux shell/Bash Commands 
				
		cd d: 
		mkdir SA-RDevOpsJan27
		cd SA-RDevOpsJan27
		mkdir repo1 
		mkdir repo2

		Working with GIT ::::
		
		Git Workflow :::
		
		Distributed VCS :::
		
	
		Local Machine 											<====>										Remote Server 
		
		Working Directory 	  -->		Staging/Index Area		 --> 		Local Repository		-->			Remote Repository
		
		index.html		  -----------> 	index.html			------------->	index.html_v1.0		---------->		index.html_v1.0
							git add                          git commit                          git push
		
		index.html		  -----------> 	index.html			------------->	index.html_v1.1			
							git add                          git commit                    
			

		Developers' Workload :::
		
			- New Project 
			
			- Enhancement/Bug fixing
			
			
		
		git clone 	==>	Used to Copy/Clone the Entire Remote Repository to Local Machine 
		
		git add		==> Used to add the changes from Working Directory to Staging Area 
		
		git commit 	==> Used to permanently commit the changes from Staging Area to Local Repository
		
		git Push	==> Used to Push the Changes from Local Repository to Remote Repository 
		
		git fetch/pull 
			
			---> Both git fetch/pull are used to Handle the incremental changes from Remote Repository
		
			git fetch ==> 
				It is just to check for the incremental changes in the remote repository.
				If the Incremental Changes are available, it will be updated only in the Local Repository.
				git fetch will NEVER Update the Incremental Changes in Working Directory
				Later if we want to bring the changes to working directory from local repository :
					We need to explicitly use git Merge / git Checkout / git Pull.
		

			git pull ==> 
				It is to check for the incremental changes in the remote repository.
				If the Incremental Changes are available, it will update the Working Directory as well as the Local Repository.
				
				git pull ==> git fetch + git Merge 
				
				
		fork 		==>	Used to copy a remote repository to another remote repository
		
		git init 	==> Used to Initialize a git repository in the Local Machine
						Create a GIT Directory and the default branch called master/main
		
		
		Remote Repository ::::
		
			repo1 :		20KB
					index.html 		10 lines 	10KB
					index.html 		+10 lines   10KB 				# Incremental 
					
			
		clone :
			repo1 : 10KB 
					index.html 		10 lines 	10KB	
					index.html 		+10 lines   10KB 
		Pull :	
		
		
		Working with Git Local Repository ::: 
		
		Local Machine 											<====>										Remote Server 
		
		Working Directory 	  -->		Staging/Index Area		 --> 		Local Repository		-->			Remote Repository
		
		index.html		  -----------> 	index.html			------------->	index.html_v1.0		---------->		index.html_v1.0
							git add                          git commit                          git push
		
		file1.txt		  -----------> 	file1.txt			------------->	index.html_v1.1			
							git add                          git commit                    
					
		
		
		Create Local Repository :::
		
		git init 	==> Used to Initialize a git repository in the Local Machine
						Create a GIT Directory and the default branch called master/main
						
						****Branch is the Logical copy of a Repository

						
		Open git bash 
		cd d: 
		mkdir SA-RDevOpsJan27
		cd SA-RDevOpsJan27
		mkdir repo1 
		mkdir repo2
		
		git init 
		
		echo "rec1" >> file1.txt 
			
		git status 		==> Used to get the current status of the repository
		
		git add			==> Used to add the changes from Working Directory to Staging Area 
		
		Eg: 
		
			git add <file_name>
			
			git add <file1_name> <file2_name>

			git add *.jsp *.txt 
			
			git add *.java 
			
			git add .			# Used to add all the files to staging area
			
			
		
		git commit 		==> Used to permanently commit the changes from Staging Area to Local Repository
		
		git log 		==> Used to get the list of commits in the repository
		
		HEAD Pointer	==> Always point to the latest commit of current Branch.
		
		
		git commit 		==> 
		
			unique commit_id 
			
		git log ::
			list commits 
			
			Author Name & EMail_id has to be configured before the very first commit.
			
		
		git config :::
		
			Local Configuration				# This is meant within a specific repository
			
				git config user.name "Loksai"
				git config user.email "loksai@asdfsd.com"
			
			Global Configuration			# This is meant for all the repositories in Local Machine
			
				git config --global user.name "Loksai"
				git config --global user.email "loksai@asdfsd.com"
				
Practise:::

		Open git bash 
		
		cd d: 
		mkdir SA-RDevOpsJan27
		cd SA-RDevOpsJan27
		mkdir repo1 
		cd repo1 
		
		git init 

		git config --global user.name "Loksai"
		git config --global user.email "loksai@asdfsd.com"		

		git config --list
		
		echo "rec1" >> file1.txt 
		
		ls
		
		cat file1.txt
			
		git status 	
		
		git add	file1.txt 	
		
		git commit -m "Created file1.txt"
		
		git log 	
		
		echo "rec1" >> file2.txt 
		
		git add file2.txt 
		
		git commit -m "Created file2.txt"
		
		git log 
		cd ..
		
		git --help 
		
		
		git add			==> Used to add the changes from Working Directory to Staging Area 
		
		Eg: 
		
			git add <file_name>
			
			git add <file1_name> <file2_name>

			git add *.jsp *.txt 
			
			git add *.java 
			
			git add .			# Used to add all the files to staging area
			
			
		
		git commit 		==> Used to permanently commit the changes from Staging Area to Local Repository
		
			git commit -m "<Valid Message related to the change>"

				CR Number  CR012024
				Release ID 
				
			git commit -m "CR012024 - Created/Updated the file"

	
		
		git log 		==> Used to get the list of commits in the repository
		
		git log --oneline 
		
		git log -2 
		
		git log --stat -2
		
		git log --oneline -2
		
		git show <commit_id>
		
		git diff 			# Used to compare and check the difference between the current changes in working directory and already committed Changes.
		
		How to unstage or remove the changes from staging area ???
		
			git rm --cached <file_name>		# Used to just remove the changes from staging area. The Changes will be back to working directory
			
			git rm -f <file_name> 			# Used to permanently remove the file from staging and working directory
			
  485  cd d:
  486  clear
  487  mkdir SA-RDevOpsJan27
  488  cd SA-RDevOpsJan27/
  489  pwd
  490  mkdir Repo1
  491  ls
  492  cd Repo1/
  493  pwd
  494  cd ..
  495  mkdir Repo2
  496  ls
  497  clear
  498  ls
  499  pwd
  500  clear
  501  cd d:
  502  cd SA-RDevOpsJan27/
  503  ls
  504  cd Repo1/
  505  clear
  506  pwd
  507  ls
  508  ls -a
  509  clear
  510  git init
  511  ls
  512  ls -a
  513  cd .git
  514  ls
  515  cd ..
  516  ls
  517  clear
  518  ls
  519  ls
  520  clear
  521  echo "Hello"
  522  echo "Record1" >> file1.txt
  523  ls
  524  cat file1.txt
  525  echo "Record2" >> file1.txt
  526  cat file1.txt
  527  git status
  528  git add file1.txt
  529  git status
  530  git commit -m "Created file1.txt"
  531  git status
  532  git log
  533  clear
  534  cd ..
  535  mkdir demorepo1
  536  cd demorepo1/
  537  clear
  538  ls
  539  ls -a
  540  clear
  541  git init
  542  ls -a
  543  clear
  544  git status
  545  ls
  546  echo "rec1" >> file1.txt
  547  git status
  548  git add file1.txt
  549  git status
  550  git commit -m "Created file1.txt"
  551  git log
  552  ls
  553  echo "rec1" >> file2.txt
  554  git status
  555  git add file2.txt
  556  git status
  557  git commit -m "created file2.txt"
  558  git log
  559  clear
  560  git status
  561  git log
  562  clear
  563  git log
  564  git config user.name "Loksai"
  565  echo "rec!" >> file3.txt
  566  git add file3.txt
  567  git commit -m "Created file3.txt"
  568  git log
  569  cd ..
  570  ls
  571  cd Repo2/
  572  git init
  573  echo "REc1" >> f1.txt
  574  git add f1.txt
  575  git commit -m "Created f1.txt"
  576  git log
  577  git config list
  578  clear
  579  git config --list
  580  clear
  581  git log
  582  git --help
  583  clear
  584  git --help
  585  git -list
  586  clear
  587  clear
  588  cd ..
  589  ls
  590  mkdir demorepo2
  591  clear
  592  cd demorepo2
  593  clear
  594  git init
  595  git status
  596  echo "rec1" >> f1.txt
  597  git status
  598  git add f1.txt
  599  git commit -m "Created f1.txt"
  600  clear
  601  ls
  602  echo "rec1" >> s1.txt
  603  ls
  604  git status
  605  echo "rec1" >> s2.txt
  606  echo "rec1" >> s3.txt
  607  echo "rec1" >> q1.java
  608  echo "rec1" >> q2.jsp
  609  echo "rec1" >> q1.jsp
  610  echo "rec1" >> l1.md
  611  echo "rec1" >> k1.doc
  612  echo "rec1" >> e1.java
  613  ls
  614  git status
  615  git add e1.java s1.txt
  616  git status
  617  git add *.txt *.jsp
  618  git status
  619  git add .
  620  git status
  621  clear
  622  git status
  623  git rm --cached e1.java
  624  git status
  625  git rm -f *.jsp
  626  git status
  627  ls
  628  clear
  629  git status
  630  git commit -m "created sample files"
  631  git status
  632  clear
  633  git log
  634  git add .
  635  git commit -m "created dummy file"
  636  echo "rec1" >> w1.txt
  637  git add .
  638  git commit -m "created w1.txt"
  639  echo "rec1" >> t1.txt
  640  git add .
  641  git commit -m "created t1.txt"
  642  clear
  643  git log
  644  git log
  645  git log --oneline
  646  git log --oneline -2
  647  git log --oneline -3
  648  git log -2
  649  git log --stat -2
  650  clear
  651  git log -1
  652  git log --stat -1
  653  clear
  654  git log --oneline
  655  git show 98e4ad5
  656  clear
  657  clear
  658  clear
  659  ls
  660  git status
  661  cat e1.java
  662  echo "rec2" >> e1.java
  663  echo "rec3" >> e1.java
  664  cat e1.java
  665  git status
  666  git diff
  667  git add .
  668  git commit -m "Updated e1.java"
  669  git diff
  670  cat e1.java
  671  echo "record1" > e1.java
  672  cat e1.java
  673  git diff
  674  git add .
  675  git commit -m "updated e1.java"
  676  git diff
  677  clear
  678  ls
  679  rm f1.txt
  680  ls
  681  git status
  682  clear
  683  git commit -m "Deleted file"
  684  git add .
  685  git commit -m "Deleted file"
  686  git log --oneline
  687  git log --stat -1
  688  clear
  689  history



		AWS Cloud Platform ::::
		
			Virtual Machines :::
			
			Create AWS Free-Tier Account
				Avail it for 12 Months.
				- Active Email ID 
				
				- Active Mobile Phone Number 
				
				- Active Credit/Debit Card - with International Transaction Enabled. 2INR 
				
			
######################
Day 3 - 3rd Feb. 2024
######################				
		
	git Ignore!
	
	git revert / reset 
	
	GIT Branching Techniques
	
	Working Git Branches - Parallel Development 
	
	Rebase / Squash 
	
	stash
	
	Working with Remote GIT Repositories 
	
	Jenkins!
			
			
	git Ignore!		== Is used to ignore the files/folders from tracking.
	
		1. git init 
		
		2. vi .gitignore
		
			press i from keyboard 
			
				*.doc 
				*.war 
				*.jar 
				*.txt 
			
			press esc:qw 			# Save and Exit from the file 
			press esc:q!			# Exit from the file with saving
		
		
		Project Directory / Workspace / Folder 
		
		Java_web_app_Project											commit Local Repo				==>		 push to remote repo.
			src
				sign.java		3-tier application		SQL DBASE 
				payment.java 
			test_case 
			appln.properties 
			*.doc
			target
				*.war
			DB_Secrets 
			dbusername.txt
			dbpassword.txt
			
		Proj_Document 
			

	GIT RESET / REVERT ::

		Both git reset & revert are used to undo the committed changes.
		
	
	git reset ::
	
			- Is used to undo the changes.
			- HEAD Pointer will go back to the previous commit point.
			- It will never create any new commit point for tracking. so we cannot track the reset activies.
			- git reset is NOT Recommended to use in the shared repositories.
			
		Syntax :
		
			git reset <option> <commit_id>
			
			
			git reset --soft
			
				- Reset --soft will undo the changes - HEAD Pointer moves to previous commit point
				- It will take the change back to staging area. 
				- Changes will be removed from local repository. But, it will be available in staging area and working directory
			
			git reset --mixed 								# Default Option
				- Reset --mixed will undo the changes - HEAD Pointer moves to previous commit point
				- It will take the change back to working directory. 
				- Changes will be removed from local repository and staging. But, it will be retained in working directory
				
			git reset --hard 
				- Reset --mixed will undo the changes - HEAD Pointer moves to previous commit point
				- Changes will be permanently removed from local repository, staging area and working directory
				
		
		ls - Linux to get the list of files/folders from working directory 
		
		git ls-files - git command to get list of files/folders that are present in staging area/Local Repository.
		
		
		
	git Revert ::
	
		- Is used to used undo a specific commit.
		- It create a new commit for the purpose of tracking.
		- git revert is same as git reset --hard. But difference is revert will create a new commit point for track.
	
		Syntax : 
		
			git revert <commit_id>
			
			
	GIT Branching Techniques :::
	
		Branches are the Logical copy of the Master branch of Repository
		master / main Branch # Default Branch.
		Used to maintain the Integrity of Master Branch.
		
		Parallel Development using GIT :::
		
		Repo1:
		
			master 				# Production version of source code.
				cm1,cm2,cm3....
				
				feature1_Branch : cm1,cm2,cm3,f1cm1,f1cm2
				feature2_Branch : cm1,cm2,cm3,f2cm1,f2cm2			
				feature3_Branch : cm1,cm2,cm3,f3cm1,f3cm2	

			Developers can independently work in their feature branch, and upon proper testing and review, it can be merge to master branch.
			
		GIT Branching Strategies : It is used to maintain the Integrity of Master Branch.
		
		Scenario1 :
		
			Repo1 :
				master - cm1,cm2,cm3  s1.java 
				
					feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............

					feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
					
					Merge the latest changes from feature1 to master 
				
		Scenario2 :
		
			Repo1 :
				master - cm1,cm2,cm3  

					Developer1_Branch : - cm1,cm2,cm3 
								
								cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
						
						feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
												Merge the latest changes from feature1 to Developer1_Branch 
						feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
												Merge the latest changes from feature2 to Developer1_Branch
					
		Scenario3 :
		
			Repo1 :
				master - cm1,cm2,cm3  

					Integration_Branch : - cm1,cm2,cm3,Developer1_Branch,Developer2_Changes
					
						Developer1_Branch : - cm1,cm2,cm3
									
									cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
							
							feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
													Merge the latest changes from feature1 to Developer1_Branch 
							feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
													Merge the latest changes from feature2 to Developer1_Branch
													
						Developer2_Branch : - cm1,cm2,cm3 
									
									cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
							
							feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
													Merge the latest changes from feature1 to Developer2_Branch 
							feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
													Merge the latest changes from feature2 to Developer2_Branch
													
		Scenario4 :
		
			Repo1 :
				master - cm1,cm2,cm3,cm4(T1&2)  

					Release_Branch : cm1,cm2,cm3,Team1,Changes,Team2_Changes 
					
						Integration_Branch1 : - cm1,cm2,cm3,Developer1_Branch,Developer2_Changes								# Team1
																
							Developer1_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer1_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer1_Branch
														
							Developer2_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer2_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer2_Branch
														
						Integration_Branch2 : - cm1,cm2,cm3,Developer1_Branch,Developer2_Changes								# Team 2
						
							Developer1_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer1_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer1_Branch
														
							Developer2_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer2_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer2_Branch
														
														
													
													
		Create GIT Branches !
		
			git branch <feature1>			# just create new branch 
			
			git switch <feature1>			# just switch to any branch 
			
			git switch -c <feature1>		# create and switch to new branch 
			
			git checkout -b <feature3>		# create and switch to new branch 
			
			
			Repo: 
			
				master - cm1 
				
					feature1 - cm1 
								cm1,f1cm1
					
					git switch master 
								
					git merge feature1 				# Should executed in the target branch.
					
			1. How the Merge Conflict Occurs ???
					When more than one user/feature try to update the same file and record.
			
			2. How to resolve the Merge Conflict ???
					- Identify the file(s) causing merge conflict 
					- Review the file content and decide whose content has to be retained/removed from the target branch.
					- Update the file by removing the header and footer messages with valid record.
					- perform git add and create new commit
					
					
			3. Prevent the Merge Conflict!!!!
			
				CiCD - pipeline groovy scripts

					user1 - pipeline1.groovy 		master - feature1 
					user2 - pipeline1.groovy 		master - feature2
					
				ansible/kubernetes - yaml scripts 
				
				
		GIT REBASE :::::
		
				git Commit ==> Commits should be in Linear fashion 
				
				To Maintain the Linear Commit History we use git rebase!
				Keep your current branch in sync with target branch
				It is used to prevent merge conflicts in the target branch.
				
		
			Repo1:
			
				master : cm1,cm2,cm3
				
					cm1,cm2,cm3,f1cm1,f1cm2						# Upon merging Feature1.
					
					cm1,cm2,cm3,f2cm1,f2cm2,f1cm1,f1cm2			# Upon Merging Feature2 without rebase 
					
					cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging Feature2 with rebase.
				
					feature1 : cm1,cm2,cm3
					
						cm1,cm2,cm3,f1cm1,f1cm2
							
							git rebase master 					# Should be executed from the current branch
						
							git switch master 
								
							git merge feature1 		
					
					feature2 : cm1,cm2,cm3	
					
						cm1,cm2,cm3,f2cm1,f2cm2
						
							git rebase master 
							
						cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2	
						
							git switch master 
							
							git merge feature2 		# 	

				
		GIT SQUASH :::::
		
				-- > Used to combine more than one commit into single commit point. 
				
			Repo1: 

				master : cm1
				
					cm1,f1cm1,2,3,4,5,6,7,8,9,..............,f1cn 
					
					feature1 - cm1,f1cm1,2,3,4,5,6,7,8,9,..............,f1cn 
				
		Scenario4 :
		
			Repo1 :
				master - cm1,cm2,cm3,cm4(T1&2)  

					Release_Branch : cm1,cm2,cm3,Team1_Changes,Team2_Changes 
					
						Integration_Branch1 : - cm1,cm2,cm3,Developer1_Changes,Developer2_Changes								# Team1
																
							Developer1_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer1_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer1_Branch
														
							Developer2_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer2_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer2_Branch
														
						Integration_Branch2 : - cm1,cm2,cm3,Developer1_Changes,Developer2_Changes								# Team 2
						
							Developer1_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer1_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer1_Branch
														
							Developer2_Branch : - cm1,cm2,cm3 
										
										cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,f2mc1,f2cm2,f2cm3		# Upon merging feature1  & 2
								
								feature1 - cm1,cm2,cm3,f1mc1,f1cm2,f1cm3,.............
														Merge the latest changes from feature1 to Developer2_Branch 
								feature2 - cm1,cm2,cm3,f2mc1,f2cm2,f2cm3,.............
														Merge the latest changes from feature2 to Developer2_Branch			
				
				

		git cherry-pick <commit_id>

		git cherry-pick <commit_id1> <commit_id1>
		
		git cherry-pick <Team1_Changes>
		
		
		git merge <branch_name>
		

  501  cd d:
  502  cd SA-RDevOpsJan27/
  503  ls
  504  clear
  505  ls
  506  clear
  507  mkdir samplerepo1
  508  cd samplerepo1/
  509  git init
  510  ls -a
  511  vi .gitignore
  512  git status
  513  git add .
  514  git commit -m "Initial Commit for .gitignore"
  515  clear
  516  ls
  517  ls -a
  518  clear
  519  cat .gitignore
  520  ls
  521  echo "rec1" >> file1.txt
  522  git status
  523  echo "rec1" >> a1.doc
  524  git status
  525  clear
  526  ls
  527  cat .gitignore
  528  ls
  529  echo "rec1" >> sample.txt
  530  ls
  531  git status
  532  git add .
  533  clear
  534  ls
  535  echo "rec" >> signin.java
  536  ls
  537  git status
  538  cat .gitignore
  539  ls
  540  ls -a
  541  clear
  542  ls
  543  clear
  544  cd ..
  545  mkdir cd samplerepo2/
  546  cd samplerepo2/
  547  clear
  548  git init
  549  echo "rec1" >> f1.txt
  550  git add .
  551  git commit -m "CM1"
  552  ls
  553  echo "rec1" >> f2.txt
  554  ls
  555  git ls-files
  556  git add .
  557  git ls-files
  558  git commit -m "CM2"
  559  echo "rec1" >> f3.txt
  560  git add .
  561  git commit -m "CM3"
  562  echo "rec1" >> f4.txt
  563  git add .
  564  git commit -m "CM4"
  565  echo "rec1" >> f5.txt
  566  git add .
  567  git commit -m "CM5"
  568  clear
  569  ls
  570  git log --oneline
  571  ls
  572  git ls-files
  573  git status
  574  git reset --soft 93cc1a7
  575  ls
  576  git ls-files
  577  git status
  578  git log --oneline
  579  git commit -m "CM5.1"
  580  git log --oneline
  581  ls
  582  git ls-files
  583  git status
  584  git reset --mixed 93cc1a7
  585  ls
  586  git ls-files
  587  git status
  588  git log --oneline
  589  git add .
  590  git commit -m "CM5.2"
  591  git log --oneline
  592  git ls-files
  593  ls
  594  git status
  595  git reset --hard 93cc1a7
  596  ls
  597  git ls-files
  598  git status
  599  git log --oneline
  600  git reset --hard 5110989
  601  ls
  602  git ls-files
  603  git status
  604  git log --oneline
  605  clear
  606  ls
  607  git log --oneline
  608  cd ..
  609  mkdir samplerepo3
  610  cd samplerepo3
  611  git init
  612  echo "rec1" >> s1.txt
  613  git add .
  614  git commit -m "CM1"
  615  echo "rec1" >> s2.txt
  616  git add .
  617  git commit -m "CM2"
  618  echo "rec1" >> s3.txt
  619  git add .
  620  git commit -m "CM3"
  621  echo "rec1" >> s4.txt
  622  git add .
  623  git commit -m "CM4"
  624  echo "rec1" >> s5.txt
  625  git add .
  626  git commit -m "CM5"
  627  clear
  628  git log
  629  clear
  630  git log --oneline
  631  ls
  632  git ls-files
  633  git status
  634  git revert c4ddd40
  635  git log --oneline
  636  git status
  637  git ls-files
  638  ls
  639  git revert 7bb7938
  640  ls
  641  git log --oneline
  642  git show 7bb7938
  643  git show 0b7e35d
  644  clear
  645  git log --oneline
  646  git show 7bb7938
  647  cat s4.txt
  648  clear
  649  ls
  650  git log --oneline
  651  ls
  652  echo "rec2" >> s5.txt
  653  git add .
  654  git commit -m "cm5.3"
  655  ls
  656  git log --oneline
  657  git show bd825e7
  658  cat s5.txt
  659  git revert bd825e7
  660  ls
  661  cat s5.txt
  662  clear
  663  clear
  664  ls
  665  cd ..
  666  mkdir samplerepo4
  667  clear
  668  cd samplerepo4
  669  git init
  670  git branch
  671  echo "rec1" >> f1.txt
  672  git add .
  673  git commit -m "cm1"
  674  clear
  675  git branch
  676  git branch feature1
  677  git branch
  678  git switch -c feature2
  679  git branch
  680  git switch master
  681  git branch
  682  git log --oneline
  683  ls
  684  git switch feature1
  685  git switch master
  686  clear
  687  git branch
  688  git checkout -b feature3
  689  git switch master
  690  clear
  691  git log --oneline
  692  ls
  693  git switch feature1
  694  ls
  695  git log --oneline
  696  echo "rec1" >> q1.txt
  697  git add .
  698  git commit -m "f1cm1"
  699  ls
  700  git log --oneline
  701  git switch master
  702  ls
  703  git log --oneline
  704  clear
  705  git switch feature1
  706  clear
  707  ls
  708  git log --oneline
  709  cat q1.txt
  710  git switch master
  711  ls
  712  git log --oneline
  713  git merge feature1
  714  ls
  715  git log --oneline
  716  clear
  717  cd ..
  718  mkdir samplerepo5
  719  clear
  720  cd samplerepo5
  721  clear
  722  git init
  723  echo "rec1" >> q1.txt
  724  git add .
  725  git commit -m "cm1"
  726  git branch
  727  git branch feature1
  728  git branch feature2
  729  clear
  730  git branch
  731  git log --oneline
  732  git switch feature1
  733  git log --oneline
  734  ls
  735  cat q1.txt
  736  echo "Record2 from feature1" >> q1.txt
  737  cat q1.txt
  738  
  739  git add .
  740  git commit -m "f1cm1"
  741  git log --oneline
  742  cat q1.txt
  743  git switch feature2
  744  ls
  745  git log --oneline
  746  cat q1.txt
  747  echo "Record2 from feature2" >> q1.txt
  748  git add .
  749  git commit -m "f2cm1"
  750  cat q1.txt
  751  git log --oneline
  752  git switch master
  753  ls
  754  cat q1.txt
  755  git log --oneline
  756  git merge feature1
  757  cat q1.txt
  758  git log --oneline
  759  git merge feature2
  760  clear
  761  git status
  762  cat q1.txt
  763  vi q1.txt
  764  cat q1.txt
  765  git add .
  766  git commit -m "Resolved Merge Conflict"
  767  ls
  768  git log --oneline
  769  git switch feature1
  770  echo "rec1" >> f1.txt
  771  ls
  772  cat f1.txt
  773  touch f2.txt
  774  cat f2.txt
  775  vi f2.txt
  776  cat f2.txt
  777  vi f2.txt
  778  cat f2.txt
  779  clear
  780  ls
  781  cd ..
  782  mkdir samplerepo6
  783  cd samplerepo6
  784  git init
  785  clear
  786  echo "rec1" >> q1.txt
  787  git add .
  788  git commit -m "cm1"
  789  git log --oneline
  790  ls
  791  git branch feature1
  792  git branch feature2
  793  clear
  794  git branch
  795  git switch feature1
  796  git log --oneline
  797  ls
  798  echo "rec1" >> l1.txt
  799  git add .
  800  git commit -m "f1cm1"
  801  git log --oneline
  802  ls
  803  git rebase master
  804  git switch master
  805  git merge feature1
  806  ls
  807  git log --oneline
  808  git switch feature2
  809  git log --oneline
  810  ls
  811  echo "rec1" >> k1.txt
  812  git add .
  813  git commit -m "f2cm1"
  814  echo "rec1" >> k2.txt
  815  git add .
  816  git commit -m "f2cm2"
  817  echo "rec1" >> k3.txt
  818  git add .
  819  git commit -m "f2cm3"
  820  git log --oneline
  821  ls
  822  git rebase master
  823  git log --oneline
  824  git rebase master
  825  ls
  826  git switch master
  827  git merge feature2
  828  git log --oneline
  829  clear
  830  ls
  831  git log --oneline
  832  git switch -c feature3
  833  git log --oneline
  834  ls
  835  echo "rec1" >> z1.txt
  836  git add .
  837  git commit -m "f3cm1"
  838  echo "rec1" >> z2.txt
  839  git add .
  840  git commit -m "f3cm2"
  841  echo "rec1" >> z3.txt
  842  git add .
  843  git commit -m "f3cm3"
  844  echo "rec1" >> z4.txt
  845  git add .
  846  git commit -m "f3cm4"
  847  echo "rec1" >> z5.txt
  848  git add .
  849  git commit -m "f3cm5"
  850  clear
  851  git log --oneline
  852  git switch master
  853  git log --oneline
  854  git merge --squash feature3
  855  git status
  856  git commit -m "Combined commits from feature3"
  857  git log --oneline
  858  ls
  859  clear
  860  history

Next :

	git stash
	
	Working with Remote GIT Repositories 
	
	Jenkins!
		
		AWS Account 
		
		Github Account 
		
		SSH Agent - MobaXterm		https://mobaxterm.mobatek.net/download.html			
			
			
			
######################
Day 4 - 4th Feb. 2024
######################	

	git stash	
			- > used to save the uncommitted changes to a temporary area in the repository.
	
		Repo1 
			master : c1
			
				feature1 : c1,
				
		
		git stash save "Stash_Message"
		
		git stash list 
		
		git stash apply 	-- apply the latest entry from stage list back to staging area.
		
		git stash apply stash@{1} -- apply the specific entry from stage list back to staging area.
		
		git stash drop 		-- drop the latest entry from stage list.
		
		git stash drop stash@{1} 		-- drop the specific entry from stage list.
		
		git stash pop	 -- apply latest entry from stage list back to staging area.
						 --	Delete the entry from the stash list.
						 
		git stash clear  - clean up the stage list
		
	
	
	Working with Remote GIT Repositories ::
	
		Developers' Workload :::
		
			- New Project 
			
			- Enhancement/Bug fixing
			
		Remote Repository :::
		
			Pull Request :::: 
					Submitted by the developer to the reviewer 
					
		
		https://github.com/SA-RDevOps-Jan27/testrepository1.git
			git clone https://github.com/SA-RDevOps-Jan27/testrepository1.git 
			
		git clone 	==>	Used to Copy/Clone the Entire Remote Repository to Local Machine 
		
		git add		==> Used to add the changes from Working Directory to Staging Area 
		
		git commit 	==> Used to permanently commit the changes from Staging Area to Local Repository
		
		git Push	==> Used to Push the Changes from Local Repository to Remote Repository 
		
		git fetch/pull 
			
			---> Both git fetch/pull are used to Handle the incremental changes from Remote Repository
		
			git fetch ==> 
				It is just to check for the incremental changes in the remote repository.
				If the Incremental Changes are available, it will be updated only in the Local Repository.
				git fetch will NEVER Update the Incremental Changes in Working Directory
				Later if we want to bring the changes to working directory from local repository :
					We need to explicitly use git Merge / git Checkout / git Pull.
		

			git pull ==> 
				It is to check for the incremental changes in the remote repository.
				If the Incremental Changes are available, it will update the Working Directory as well as the Local Repository.
				
				git pull ==> git fetch + git Merge 
							
		
		Github Access Token - is used to authenticate the user to github from any cli
		
			Create github access token  
			
				- New Project 

		git commit 		==> Used to permanently commit the changes from Staging Area to Local Repository
		
			git commit -m "<Valid Message related to the change>"

				CR Number  CR012024
				Release ID 
				
			git commit -m "CR012024 - Created/Updated the file"
	
			git commit --amend -m "valide Msg"			# Used to change the commit message.

  501  cd d:
  502  cd SA-RDevOpsJan27/
  503  ls
  504  mkdir testrepo1
  505  cd testrepo1/
  506  clear
  507  git init
  508  echo "rec1" >> file1.txt
  509  git add .
  510  git commit -m "created file1.txt"
  511  git branch feature1
  512  git branch feature2
  513  clear
  514  git switch feature1
  515  ls
  516  git log --oneline
  517  echo "rec!" >> s1.txt
  518  echo "rec!" >> s1.txt
  519  echo "rec!" >> s1.txt
  520  echo "rec!" >> s1.txt
  521  cat s1.txt
  522  git add .
  523  git status
  524  git switch feature2
  525  git status
  526  git switch feature1
  527  clear
  528  git status
  529  git stash save "created for s1.txt"
  530  git status
  531  ls
  532  git log --oneline
  533  git stash list
  534  git stash apply
  535  git status
  536  ls
  537  git ls-files
  538  git stash list
  539  ls
  540  git status
  541  git commit -m "created s1.txt"
  542  ls
  543  git stash drop
  544  git stash list
  545  echo "rec1" >> w1.txt
  546  git add .
  547  git stash save "craeted w1.txt"
  548  echo "rec1" >> e1.txt
  549  git add .
  550  git stash save "craeted e1.txt"
  551  echo "rec1" >> t1.txt
  552  git add .
  553  git stash save "craeted t1.txt"
  554  echo "rec1" >> y1.txt
  555  git add .
  556  git stash save "craeted y1.txt"
  557  git stash list
  558  git stash apply
  559  git stash list
  560  git stash drop
  561  git stash list
  562  git stash apply stash@{1}
  563  git stash drop stash@{1}
  564  git stash list
  565  git stash pop
  566  git stash list
  567  git stash clean
  568  git stash clear
  569  git stash list
  570  cd ..
  571  mkdir remoterepos
  572  cd re
  573  cd remoterepos/
  574  git clone https://github.com/SA-RDevOps-Jan27/testrepository1.git
  575  ls
  576  cd testrepository1/
  577  ls
  578  git status
  579  git remote -v
  580  ls
  581  git log --oneline
  582  ls
  583  git switch -c localfeature1
  584  l
  585  ls
  586  echo "sfgdfgsdf" >> localfile1.txt
  587  git add .
  588  git commit -m "local file changes"
  589  git status
  590  git push -u origin localfeature1
  591  git switch master
  592  git switch main
  593  git status
  594  ls
  595  git log --oneline
  596  git fetch
  597  ls
  598  git pull
  599  ls
  600  git ls-files
  601  ls
  602  git status
  603  git pull
  604  cd ..
  605  mkdir testrepo1
  606  cd testrepo
  607  cd testrepo1/
  608  git init
  609  echo "rec1" >> file.txt
  610  git add .
  611  git commit -m "local file1.txt"
  612  git remote -v
  613  git remote add origin https://github.com/SA-RDevOps-Jan27/TestRepo2.git
  614  git remote -v
  615  git branch -M main
  616  git branch -M master
  617  git push -u origin master
  618  git branch
  619  git branch f1
  620  git branch f2
  621  git branch -D f2
  622  clear
  623  ls
  624  git branch
  625  git branch f2
  626  git branch f3
  627  git branch
  628  git branch -D f3
  629  git branch
  630  git branch -M main
  631  git status
  632  echo "rec1" >> l1.txt
  633  git add .
  634  git commit -m "aasdfasdfasdfsfasdfas"
  635  git log --oneline
  636  git commit -m "valide Msg"
  637  git commit --amend -m "valide Msg"
  638  git log --oneline
  639  git status
  640  cd ..
  641  history

